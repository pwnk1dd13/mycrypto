# -*- coding: utf-8 -*-
#!/usr/bin/env sage
# Towel 2019

"""
Solution to 'Biggars' challenge from FireShell CTF 2019.
A multi-prime RSA computation with large N requiring CRT
to compute d rather than normal fast-power algorithm.
"""


# This file was *autogenerated* from the file /home/sksb/Desktop/code/crypto/rsa/primes1/manyprime.sage
from sage.all_cmdline import *   # import sage library

_sage_const_580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637 = Integer(580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637); _sage_const_320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464 = Integer(320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464); _sage_const_65537 = Integer(65537); _sage_const_9282105380008121879 = Integer(9282105380008121879); _sage_const_9303850685953812323 = Integer(9303850685953812323); _sage_const_9389357739583927789 = Integer(9389357739583927789); _sage_const_10336650220878499841 = Integer(10336650220878499841); _sage_const_10638241655447339831 = Integer(10638241655447339831); _sage_const_11282698189561966721 = Integer(11282698189561966721); _sage_const_11328768673634243077 = Integer(11328768673634243077); _sage_const_11403460639036243901 = Integer(11403460639036243901); _sage_const_11473665579512371723 = Integer(11473665579512371723); _sage_const_11492065299277279799 = Integer(11492065299277279799); _sage_const_11530534813954192171 = Integer(11530534813954192171); _sage_const_11665347949879312361 = Integer(11665347949879312361); _sage_const_12132158321859677597 = Integer(12132158321859677597); _sage_const_12834461276877415051 = Integer(12834461276877415051); _sage_const_12955403765595949597 = Integer(12955403765595949597); _sage_const_12973972336777979701 = Integer(12973972336777979701); _sage_const_13099895578757581201 = Integer(13099895578757581201); _sage_const_13572286589428162097 = Integer(13572286589428162097); _sage_const_14100640260554622013 = Integer(14100640260554622013); _sage_const_14178869592193599187 = Integer(14178869592193599187); _sage_const_14278240802299816541 = Integer(14278240802299816541); _sage_const_14523070016044624039 = Integer(14523070016044624039); _sage_const_14963354250199553339 = Integer(14963354250199553339); _sage_const_15364597561881860737 = Integer(15364597561881860737); _sage_const_15669758663523555763 = Integer(15669758663523555763); _sage_const_15824122791679574573 = Integer(15824122791679574573); _sage_const_15998365463074268941 = Integer(15998365463074268941); _sage_const_16656402470578844539 = Integer(16656402470578844539); _sage_const_16898740504023346457 = Integer(16898740504023346457); _sage_const_17138336856793050757 = Integer(17138336856793050757); _sage_const_17174065872156629921 = Integer(17174065872156629921); _sage_const_1728124662599884964 = Integer(1728124662599884964); _sage_const_58064239189884319088261245860234627639477460847663825143490714136730298282086868378075805695192701952531138671072258813856620656733403819610707620111422906333333873070019278705299194032131477219947357172859619752206589085714999275656750195649771567172137073313715209684081602121605656690239990065407854291693937559894644235315393176626013280388741166945283544265331419856392745255347706855127784386600127985555729317358673180532914855338192689929462401601452935736189520095421313614570977453155126361778071557443313818802225740275123150171943758948834116187091540260880923182992293536452229201920000000000000000 = Integer(58064239189884319088261245860234627639477460847663825143490714136730298282086868378075805695192701952531138671072258813856620656733403819610707620111422906333333873070019278705299194032131477219947357172859619752206589085714999275656750195649771567172137073313715209684081602121605656690239990065407854291693937559894644235315393176626013280388741166945283544265331419856392745255347706855127784386600127985555729317358673180532914855338192689929462401601452935736189520095421313614570977453155126361778071557443313818802225740275123150171943758948834116187091540260880923182992293536452229201920000000000000000)
from binascii import unhexlify
from operator import mul

# Values from the challenge
n = _sage_const
ct = _sage_const
e = _sage_const_65537 

# Factor N and compute d
print("[+] Computing d...")
UPF = [_sage_const_9282105380008121879  , _sage_const_9303850685953812323  , _sage_const_9389357739583927789  , _sage_const_10336650220878499841  , _sage_const_10638241655447339831  , _sage_const_11282698189561966721  , _sage_const_11328768673634243077  , _sage_const_11403460639036243901  , _sage_const_11473665579512371723  , _sage_const_11492065299277279799  , _sage_const_11530534813954192171  , _sage_const_11665347949879312361  , _sage_const_12132158321859677597  , _sage_const_12834461276877415051  , _sage_const_12955403765595949597  , _sage_const_12973972336777979701  , _sage_const_13099895578757581201  , _sage_const_13572286589428162097  , _sage_const_14100640260554622013  , _sage_const_14178869592193599187  , _sage_const_14278240802299816541  , _sage_const_14523070016044624039  , _sage_const_14963354250199553339  , _sage_const_15364597561881860737  , _sage_const_15669758663523555763  , _sage_const_15824122791679574573  , _sage_const_15998365463074268941  , _sage_const_16656402470578844539  , _sage_const_16898740504023346457  , _sage_const_17138336856793050757  , _sage_const_17174065872156629921  , _sage_const_1728124662599884964 ]                           # Unique Prime factorization
#phi_fs = [pow(p, k-1) * (p-1) for p, k in UPF]  # phi for each factor
#factors = [pow(p, k) for p, k in UPF]           # The raw factors of N
# above are when prime factors are repeated too
l = _sage_const
d = inverse_mod(e, l)      # Private exponent

# Use CRT to compute d rather than the fast-power algorithm
print("[+] Doing CRT to compute M...")
#M = CRT_list(
#    [int(pow(C, d % p_i, f_i)) for p_i, f_i in zip(phi_fs, factors)],
#    [N / f_i for f_i in factors]
#)

p = pow(ct,d,n)
print(p)
# Flag
#print("[+] FLAG: {flag}".format(flag=unhexlify(hex(M)))) 

